/**
 * Copyright (c) 2017 The Absolute Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as commandLineUsage from 'command-line-usage';
import * as generator from 'generator';
import * as globs from 'globs';
import * as gulp from 'gulp';
import * as shell from 'gulp-shell';
import gulpTslint from 'gulp-tslint';
import * as path from 'path';
import * as runSequence from 'run-sequence';
import * as stream from 'stream';
import * as through from 'through2';
import * as tslint from 'tslint';
import * as ts from 'typescript';

gulp.task('default', () => {
  const sections: {} = [
    {
      header: 'Bacardi',
      content: 'Bacardi project is an effort to provide multi-language ' +
      'binding for Node.js native layer.'
    },
    {
      header: 'Synopsis',
      content: '$ bacardi <command>'
    },
    {
      header: 'Available Commands',
      content: [
        { name: 'build', summary: 'Builds bacardi project' },
        { name: 'build_electron', summary: 'Builds bacardi project as ' +
          'electron' },
        { name: 'electron', summary: 'Runs bacardi project as electron' },
        { name: 'test', summary: 'Runs Unit test bacardi project' }
      ]
    }
  ];

  const usage: commandLineUsage = commandLineUsage(sections);
  process.stdout.write(usage);

  return;
});

/**
 * Build WebIDL
 */
gulp.task('build_webidl', (callback) => {
  globs(['examples/**/*.idl', 'test/**/*.idl'], async(error, files) => {
    callback(await generator.run(files));
  });
});

/**
 * This task will be used in binding.gyp to build native files.
 */
gulp.task('list_cpp_files', () => {
  return gulp.src([
        'core/**/*.h',
        'core/**/*.cc',
        'examples/**/*.h',
        'examples/**/*.cc',
        'test/**/*.h',
        'test/**/*.cc'
      ])
      .pipe(printPath());
});

/**
 * This task will be used in binding.gyp to build idl files.
 */
gulp.task('list_idl_files', () => {
  return gulp.src([
        'examples/**/*.idl',
        'test/**/*.idl'
      ])
      .pipe(printAbsolutePath());
});

/**
 * This task will be used in binding.gyp to build idl files.
 */
gulp.task('list_generated_cpp_files', () => {
  // FIXME(zino): The following file list should be generated by idl generator
  // automatically.
  const isWindows: boolean = /^win/.test(process.platform);
  const genDir: string =
      `build/Release/obj/${isWindows ? 'global_intermediate/' : 'gen'}`;
  const genFiles: string[] = [
    path.join(genDir, 'examples/calculator_bridge.cc'),
    path.join(genDir, 'examples/calculator_bridge.h'),
    path.join(genDir, 'examples/ternary_calculator_bridge.cc'),
    path.join(genDir, 'examples/ternary_calculator_bridge.h'),
    path.join(genDir, 'examples/electron/native/electron_native_bridge.cc'),
    path.join(genDir, 'examples/electron/native/electron_native_bridge.h'),
    path.join(genDir, 'test/test_interface_bridge.cc'),
    path.join(genDir, 'test/test_interface_bridge.h')
  ];

  genFiles.forEach((file) => {
    process.stdout.write(`"${file}"\n`);
  });
});

/**
 * Lint
 */
gulp.task('lint', (callback) => {
  runSequence('lint_native', 'lint_ts', callback);
});

/**
 * Lint for native
 */
gulp.task('lint_native', shell.task([
  `${path.resolve('./bacardi')} format --diff`
]));

/**
 * Lint for typescript
 */
gulp.task('lint_ts', () => {
  const program: ts.Program = tslint.Linter.createProgram('tsconfig.json');

  return gulp.src([
        'gulpfile.ts',
        'generator/index.ts',
        'generator/base/**/*.ts',
        'generator/new_parser/**/*.ts'
      ])
      .pipe(gulpTslint({
          formatter: 'codeFrame',
          program: program
      }))
      .pipe(gulpTslint.report({
        summarizeFailureOutput: true
      }));
});

gulp.task('lint_ts:fix', () => {
  const program: ts.Program = tslint.Linter.createProgram('tsconfig.json');

  return gulp.src([
        'gulpfile.ts',
        'generator/index.ts',
        'generator/base/**/*.ts',
        'generator/new_parser/**/*.ts'
      ])
      .pipe(gulpTslint({
          formatter: 'codeFrame',
          program: program,
          fix: true
      }))
      .pipe(gulpTslint.report({
        summarizeFailureOutput: true
      }));
});

/**
 * Custom plugins
 */
function printPath(): stream.Transform {
  return through.obj((file, encoding, callback) => {
    process.stdout.write(`"${path.relative(file.cwd, file.path)}"\n`);
    callback();
  });
}

function printAbsolutePath(): stream.Transform {
  return through.obj((file, encoding, callback) => {
    process.stdout.write(`"${file.path}"\n`);
    callback();
  });
}
